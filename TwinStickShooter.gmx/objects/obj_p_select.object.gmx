<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Randomize the random number seed
randomize();

for (var i = 0; i &lt; 2; i++;) {
    player[i] = noone;
}

//Accept input from player
global.a_but = gp_face1
global.b_but = gp_face2
global.x_but = gp_face3
global.y_but = gp_face4
global.start_but = gp_start

//Start the controller symbols in the middle of the screen
var global.p1select = 1;
var global.p2select = 1;

//Global var to keep track of ready/not ready
var global.p1ready = false;
var global.p2ready = false;

if !instance_exists(obj_p1_ctrl) {
   player[0] = instance_create((room_width/2), (room_height/2),obj_p1_ctrl);
}

if !instance_exists(obj_p2_ctrl) {
   player[1] = instance_create((room_width/2), (room_height/2+256),obj_p2_ctrl);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    gamepad_set_axis_deadzone(pad, 0.5);       // Set the "deadzone" for the axis
    gamepad_set_button_threshold(pad, 0.1);    // Set the "threshold" for the triggers
    if !(instance_exists(player[pad]))         // Check to see if an instance is associated with this pad index
        {
        // Create a player object and assign it a pad number
        if pad == 0 {
           //create a p1 controller in the middle of the screen
           player[pad] = instance_create((room_width/2), (room_height/2),obj_p1_ctrl);
        }
        if pad == 1 {
           //create a p2 controller in the middle of the screen
           player[pad] = instance_create((room_width/2), (room_height/2+256),obj_p2_ctrl);
        }
        with (player[pad])
            {
            image_index = pad;
            pad_num = pad;
            }
        }
    break;
case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
    var pad = async_load[? "pad_index"];       // Get the pad index
    if (instance_exists(player[pad]))          // Check for a player instance associated with the pad and remove it
        {
        with (player[pad])
            {
            instance_destroy();
            }
        player[pad] = noone;                   // Set the controller array to "noone" so it detects a new pad being connected
        }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set font &amp; color
draw_set_color(c_white);
draw_set_font(fnt_8bit);
draw_set_halign(fa_center);

//Draw Feline Logo Text
draw_text((room_width/6),(room_height/10),"Feline");

//Draw Armor Logo Text
draw_text((room_width/2),(room_height/10),"Role Select");

//Draw Armor Logo Text
draw_text((room_width/1.2),(room_height/10),"Armor");

if global.p1ready == true {
   draw_sprite(spr_ready, 0, obj_p1_ctrl.x, obj_p1_ctrl.y + 64);
}

if global.p2ready == true {
   draw_sprite(spr_ready, 0, obj_p2_ctrl.x, obj_p2_ctrl.y + 64);
}

if global.p1ready == true &amp;&amp; global.p2ready == true {
   draw_set_color(c_red);
   draw_text(room_width/2,room_height/2,"PRESS START");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
